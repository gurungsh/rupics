{"version":3,"sources":["components/photographer.js","components/imageViewer.js","App.js","serviceWorker.js","index.js"],"names":["Photographer","props","state","user","prevProps","this","setState","className","href","links","html","target","rel","src","profile_image","large","alt","username","name","Component","ImageViewer","onChange","event","searchQuery","value","onClick","preventDefault","unsplash","photos","getRandomPhoto","query","then","toJson","json","data","errors","isLoaded","catch","console","log","enterPressed","keyCode","which","envVariables","Unsplash","applicationId","process","secret","imageContent","urls","regular","alt_description","onKeyPress","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yUAgCeA,G,kBA3BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,EAAKF,MAAME,MAHN,E,gFAMAC,GACXC,KAAKJ,QAAUG,GACfC,KAAKC,SAAS,CACVH,KAAME,KAAKJ,MAAME,S,+BAInB,IACEA,EAASE,KAAKH,MAAdC,KACR,OACI,yBAAKI,UAAU,0BACX,uBAAGC,KAAML,EAAKM,MAAMC,KAAMC,OAAO,SAASC,IAAI,uBAC1C,yBAAKL,UAAU,6BAA6BM,IAAKV,EAAKW,cAAcC,MAAOC,IAAKb,EAAKc,WACrF,yBAAKV,UAAU,qBAAqBJ,EAAKe,MACzC,yBAAKX,UAAU,yBAAf,IAAyCJ,EAAKc,gB,GArBvCE,cC6EZC,G,kBA1EX,WAAYnB,GAAQ,IAAD,uBACf,4CAAMA,KAYVoB,SAAW,SAACC,GACR,EAAKhB,SAAS,CAAEiB,YAAaD,EAAMX,OAAOa,SAd3B,EAgBnBC,QAAU,SAACH,GACPA,EAAMI,iBADW,MAEiB,EAAKxB,MAA/BqB,EAFS,EAETA,YAAaI,EAFJ,EAEIA,SACjBJ,GACAI,EAASC,OAAOC,eAAe,CAAEC,MAAOP,IACnCQ,KAAKC,UACLD,MAAK,SAACE,GACC,WAAYA,EACZ,EAAK3B,SAAS,CACV4B,KAAMD,EAAKE,OACXC,UAAU,EACVb,YAAa,KAIjB,EAAKjB,SAAS,CACV4B,KAAMD,EACNG,UAAU,EACVb,YAAa,QAIxBc,MAAMC,QAAQC,MAtCR,EAyCnBC,aAAe,SAAClB,GAEC,MADFA,EAAMmB,SAAWnB,EAAMoB,QAE9B,EAAKjB,QAAQH,IA1CjB,IAAMqB,EAAe,IAAIC,IAAS,CAC9BC,cAAeC,mEACfC,OAAQD,qEAJG,OAMf,EAAK5C,MAAQ,CACTgC,KAAM,GACNE,UAAU,EACVb,YAAa,GACbI,SAAUgB,GAVC,E,sEA+CT,IAEFxC,EAAM6C,EAFL,EACsB3C,KAAKH,MAAxBgC,EADH,EACGA,KASR,OAVK,EACSE,UAMVjC,EAAO,kBAAC,EAAD,CAAcA,KAAM+B,EAAK/B,OAChC6C,EAAe,yBAAKzC,UAAU,gBAAgBM,IAAKqB,EAAKe,KAAKC,QAASlC,IAAKkB,EAAKiB,mBAHhFH,EAAe3C,KAAKH,MAAMgC,KAM1B,yBAAK3B,UAAU,aACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACX,sCADJ,4BAIA,2BAAOA,UAAU,gBAAgBiB,MAAOnB,KAAKH,MAAMqB,YAAaF,SAAUhB,KAAKgB,SAAU+B,WAAY/C,KAAKmC,eAC1G,4BAAQjC,UAAU,aAAakB,QAASpB,KAAKoB,SAA7C,UACA,yBAAKlB,UAAU,gBAAgBJ,IAEnC,yBAAKI,UAAU,mBAAmByC,Q,GArExB7B,cCMXkC,E,iLARX,OACE,yBAAM9C,UAAU,OACd,kBAAC,EAAD,W,GAJUY,aCUEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.17d48e1b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './photographer.css';\n\nclass Photographer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: this.props.user,\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props !== prevProps) {\n            this.setState({\n                user: this.props.user\n            })\n        }\n    }\n    render() {\n        const { user } = this.state;\n        return (\n            <div className=\"photographer-container\">\n                <a href={user.links.html} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <img className=\"photographer-profile-image\" src={user.profile_image.large} alt={user.username}></img>\n                    <div className=\"photographer-name\">{user.name}</div>\n                    <div className=\"photographer-username\">@{user.username}</div>\n                </a>\n            </div>\n        );\n    }\n}\n\nexport default Photographer;","import React, { Component } from 'react';\nimport Unsplash, { toJson } from 'unsplash-js';\n\nimport Photographer from './photographer'\nimport './imageViewer.css';\n\nclass ImageViewer extends Component {\n    constructor(props) {\n        super(props);\n        const envVariables = new Unsplash({\n            applicationId: process.env.REACT_APP_UNSPLASH_API_KEY,\n            secret: process.env.REACT_APP_UNSPLASH_SECRET_KEY,\n        });\n        this.state = {\n            data: [],\n            isLoaded: false,\n            searchQuery: '',\n            unsplash: envVariables,\n        }\n    }\n    onChange = (event) => {\n        this.setState({ searchQuery: event.target.value });\n    }\n    onClick = (event) => {\n        event.preventDefault();\n        const { searchQuery, unsplash } = this.state;\n        if (searchQuery) {\n            unsplash.photos.getRandomPhoto({ query: searchQuery })\n                .then(toJson)\n                .then((json) => {\n                    if (\"errors\" in json) {\n                        this.setState({\n                            data: json.errors,\n                            isLoaded: false,\n                            searchQuery: '',\n                        })\n                    }\n                    else {\n                        this.setState({\n                            data: json,\n                            isLoaded: true,\n                            searchQuery: '',\n                        })\n                    }\n                })\n                .catch(console.log);\n        }\n    }\n    enterPressed = (event) => {\n        var code = event.keyCode || event.which;\n        if (code === 13) {\n            this.onClick(event);\n        }\n    }\n    render() {\n        const { data, isLoaded } = this.state;\n        let user, imageContent;\n\n        if (!isLoaded) {\n            imageContent = this.state.data;\n        } else {\n            user = <Photographer user={data.user}></Photographer>;\n            imageContent = <img className=\"image-content\" src={data.urls.regular} alt={data.alt_description}></img>;\n        }\n        return (\n            <div className=\"container\">\n                <div className=\"sidebar\">\n                    <div className=\"title\">\n                        <h1>RUPICS</h1>\n                        Random Unsplash Pictures\n                    </div>\n                    <input className=\"input-textbox\" value={this.state.searchQuery} onChange={this.onChange} onKeyPress={this.enterPressed}></input>\n                    <button className=\"btn-search\" onClick={this.onClick}>Search</button>\n                    <div className=\"photographer\">{user}</div>\n                </div>\n                <div className=\"image-container\">{imageContent}</div>\n            </div>\n        )\n    }\n}\n\nexport default ImageViewer;","import React, { Component } from 'react';\nimport ImageViewer from './components/imageViewer'\nclass App extends Component {\n  render() {\n    return (\n      < div className=\"app\">\n        <ImageViewer></ImageViewer>\n      </div >\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}